//
// Copyright 2024 Signal Messenger, LLC.
// SPDX-License-Identifier: AGPL-3.0-only
//
syntax = "proto3";
package signal.keytrans;

message PrefixProof {
  repeated bytes proof = 1;
  uint32 counter = 2;
}

// TreeHead contains the operator's signature on the most recent version of the
// log.
message TreeHead {
  uint64 tree_size = 1;
  int64 timestamp = 2;
  bytes signature = 3;
}

// AuditorTreeHead is provided to end-users when third-party auditing is used,
// as evidence that the log is behaving honestly.
message AuditorTreeHead {
  TreeHead tree_head = 1;
  optional bytes root_value = 2;
  repeated bytes consistency = 3;
}

// FullTreeHead wraps a basic TreeHead with additional information that may be
// needed for validation.
message FullTreeHead {
  TreeHead tree_head = 1;
  repeated bytes last = 2;
  repeated bytes distinguished = 3;
  optional AuditorTreeHead auditor_tree_head = 4;
}

// ProofStep is the output of one step of a binary search through the log.
message ProofStep {
  PrefixProof prefix = 1;
  bytes commitment = 2;
}

// SearchProof contains the output of a binary search through the log.
message SearchProof {
  uint64 pos = 1;
  repeated ProofStep steps = 2;
  repeated bytes inclusion = 3;
}

// UpdateValue wraps the new value for a key with an optional signature from the
// service provider.
message UpdateValue {
  // optional bytes signature = 1; TODO
  bytes value = 2;
}

// Consistency specifies the parameters of the consistency proof(s) that should
// be returned.
message Consistency {
  optional uint64 last = 1;
  optional uint64 distinguished = 2;
}

message CondensedTreeSearchResponse {
  /**
   * A proof that is combined with the original requested identifier and the VRF public key
   * and outputs whether the proof is valid, and if so, the commitment index.
   */
  bytes vrf_proof = 1;
  /**
   * A proof that the binary search for the given identifier was done correctly.
   */
  SearchProof search = 2;
  /**
   * A 32-byte value computed based on the log position of the identifier
   * and a random 32 byte key that is only known by the key transparency service.
   * It is provided so that clients can recompute and verify the commitment.
   */
  bytes opening = 3;
  /**
   * The new or updated value that the identifier maps to.
   */
  UpdateValue value = 4;
}

// UpdateRequest comes from a user that wishes to update a key.
message UpdateRequest {
  bytes search_key = 1;
  bytes value = 2;
  Consistency consistency = 3;
}

// UpdateResponse is the output of executing an update on the tree.
message UpdateResponse {
  FullTreeHead tree_head = 1;
  bytes vrf_proof = 2;
  SearchProof search = 3;

  bytes opening = 4;
  // optional bytes signature = 5; TODO
}

// MonitorKey is a single key that the user would like to monitor.
message MonitorKey {
  bytes search_key = 1;
  // The position of the last log entry verified by the client
  // to be in the direct path to the identifier
  uint64 entry_position = 2;
  // the commitment index for the search key
  bytes commitment_index = 3;
}

// MonitorRequest comes from a user that wishes to monitor a set of keys.
message MonitorRequest {
  repeated MonitorKey keys = 1;
  Consistency consistency = 2;
}

// MonitorProof proves that a single key has been correctly managed in the log.
message MonitorProof {
  repeated ProofStep steps = 1;
}

// MonitorResponse is the output of a monitoring operation.
message MonitorResponse {
  FullTreeHead tree_head = 1;
  repeated MonitorProof proofs = 2;
  repeated bytes inclusion = 4;
}
