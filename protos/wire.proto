syntax = "proto3";
package signal.keytrans.wire;

message PrefixProof {
    repeated bytes proof = 1;
    uint32 counter = 2;
}

// TreeHead contains the operator's signature on the most recent version of the
// log.
message TreeHead {
    uint64 tree_size = 1;
    int64 timestamp = 2;
    bytes signature = 3;
}

// AuditorTreeHead is provided to end-users when third-party auditing is used,
// as evidence that the log is behaving honestly.
message AuditorTreeHead {
    TreeHead tree_head = 1;
    optional bytes root_value = 2;
    repeated bytes consistency = 3;
}

// FullTreeHead wraps a basic TreeHead with additional information that may be
// needed for validation.
message FullTreeHead {
    TreeHead tree_head = 1;
    repeated bytes last = 2;
    repeated bytes distinguished = 3;
    optional AuditorTreeHead auditor_tree_head = 4;
}

// ProofStep is the output of one step of a binary search through the log.
message ProofStep {
    PrefixProof prefix = 1;
    bytes commitment = 2;
}

// SearchProof contains the output of a binary search through the log.
message SearchProof {
    uint64 pos = 1;
    repeated ProofStep steps = 2;
    repeated bytes inclusion = 3;
}

// UpdateValue wraps the new value for a key with an optional signature from the
// service provider.
message UpdateValue {
    // optional bytes signature = 1; TODO
    bytes value = 2;
}

// Consistency specifies the parameters of the consistency proof(s) that should
// be returned.
message Consistency {
    optional uint64 last = 1;
    optional uint64 distinguished = 2;
}

// SearchRequest comes from a user that wishes to lookup a key.
message SearchRequest {
    bytes search_key = 1;
    optional uint32 version = 2;
    Consistency consistency = 3;
    // The value that the search key maps to in the transparency log.
    // This will be ACI if the search key is a phone number or username hash,
    // and ACI identity key if the search key is an ACI.
    // If the client is looking up the distinguished key, this field may be empty.
    bytes mapped_value = 4;
    optional bytes unidentified_access_key = 5;
}

// SearchResponse is the output of executing a search on the tree.
message SearchResponse {
    FullTreeHead tree_head = 1;
    bytes vrf_proof = 2;
    SearchProof search = 3;

    bytes opening = 4;
    UpdateValue value = 5;
}

// UpdateRequest comes from a user that wishes to update a key.
message UpdateRequest {
    bytes search_key = 1;
    bytes value = 2;
    Consistency consistency = 3;
}

// UpdateResponse is the output of executing an update on the tree.
message UpdateResponse {
    FullTreeHead tree_head = 1;
    bytes vrf_proof = 2;
    SearchProof search = 3;

    bytes opening = 4;
    // optional bytes signature = 5; TODO
}

// MonitorKey is a single key that the user would like to monitor.
message MonitorKey {
    bytes search_key = 1;
    repeated uint64 entries = 2;
}

// MonitorRequest comes from a user that wishes to monitor a set of keys.
message MonitorRequest {
    repeated MonitorKey owned_keys = 1;
    repeated MonitorKey contact_keys = 2;
    Consistency consistency = 3;
}

// MonitorProof proves that a single key has been correctly managed in the log.
message MonitorProof {
    repeated ProofStep steps = 1;
}

// MonitorResponse is the output of a monitoring operation.
message MonitorResponse {
    FullTreeHead tree_head = 1;
    repeated MonitorProof owned_proofs = 2;
    repeated MonitorProof contact_proofs = 3;
    repeated bytes inclusion = 4;
}


/**
 * ChatSearchResponse contains search proofs for each of the requested identifiers.
 * Callers should use the top-level `FullTreeHead` for verification;
 * the `FullTreeHead` field on the individual `SearchResponse`s will be empty.
 */
// This message is not used in the crate, but is simply reexported for convenience.
message ChatSearchResponse {
    /**
     * A signed representation of the log tree's current state along with some
     * additional information necessary for validation such as a consistency proof and an auditor-signed tree head.
     */
    FullTreeHead tree_head = 1;
    /**
     * The ACI search response is always provided.
     */
    CondensedTreeSearchResponse aci = 2;
    /**
     * This response is only provided if all of the conditions are met:
     * - the E164 exists in the log
     * - its mapped ACI matches the one provided in the request
     * - the account associated with the ACI is discoverable
     * - the unidentified access key provided in E164SearchRequest matches the one on the account
     */
    optional CondensedTreeSearchResponse e164 = 3;
    /**
     * This response is only provided if the username hash exists in the log and
     * its mapped ACI matches the one provided in the request.
     */
    optional CondensedTreeSearchResponse username_hash = 4;
}

/**
 * DistinguishedResponse contains the tree head and search proof for the most
 * recent `distinguished` key in the log.
 */
message ChatDistinguishedResponse {
  /**
   * A signed representation of the log tree's current state along with some
   * additional information necessary for validation such as a consistency proof and an auditor-signed tree head.
   */
  FullTreeHead tree_head = 1;
  /**
   * This search response is always provided.
   */
  CondensedTreeSearchResponse distinguished = 2;
}

message CondensedTreeSearchResponse {
  /**
   * A proof that is combined with the original requested identifier and the VRF public key
   * and outputs whether the proof is valid, and if so, the commitment index.
   */
  bytes vrf_proof = 1;
  /**
   * A proof that the binary search for the given identifier was done correctly.
   */
  SearchProof search = 2;
  /**
   * A 32-byte value computed based on the log position of the identifier
   * and a random 32 byte key that is only known by the key transparency service.
   * It is provided so that clients can recompute and verify the commitment.
   */
  bytes opening = 3;
  /**
   * The new or updated value that the identifier maps to.
   */
  UpdateValue value = 4;
}

// StoredTreeHead is an encoded tree head stored on-disk.
message StoredTreeHead {
    TreeHead tree_head = 1;
    bytes root = 2;
}

// StoredMonitoringData is encoded monitoring data stored on-disk.
message StoredMonitoringData {
    bytes index = 1;
    uint64 pos = 2;
    map<uint64, uint32> ptrs = 3;
    bool owned = 4;
}
